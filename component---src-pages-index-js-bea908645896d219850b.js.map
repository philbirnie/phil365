{"version":3,"sources":["webpack:///./src/utilities/aggregators.js","webpack:///./src/components/table.js","webpack:///./src/components/stats.js","webpack:///./src/pages/index.js"],"names":["Sum","accumulator","currentValue","RoundFloat","num","Math","round","Table","cumulativeDistance","runData","map","day","distance","reduce","className","reverse","dayData","cumulativeDistanceDisplayed","key","date","time","target","to","remark","Stats","totalMiles","totalDays","length","average","max","apply","parseFloat","ThousandDifferential","ThousandDifferentialLabel","abs","IndexPage","title"],"mappings":"kuFAAMA,EAAM,SAAEC,EAAaC,GAAf,OAAiCD,EAAcC,GAErDC,EAAa,SAAEC,GAAF,OAAWC,KAAKC,MAAa,IAANF,GAAc,KC2CzCG,EAxCD,WAEb,IAAIC,EAAwE,IAAnDC,EAAQC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,YAAWC,OAAQb,GAEpE,OACC,+BACC,+BACA,4BACC,wBAAIc,UAAU,YAAd,QACA,wBAAIA,UAAU,YAAd,eACA,wBAAIA,UAAU,gBAAd,YACA,wBAAIA,UAAU,kBAAd,kBACA,wBAAIA,UAAU,aAAd,SACA,wBAAIA,UAAU,eAAd,aAGD,+BAECL,EAAQM,UAAUL,KAAK,SAAEM,GAExB,IAAMC,EAA8BZ,KAAKC,MAAOE,GAAuB,IAGvE,OAFAA,GAAyC,IAAnBQ,EAAQJ,SAEvB,wBAAIM,IAAMF,EAAQG,MACxB,wBAAIL,UAAU,YAAaE,EAAQG,MACnC,wBAAIL,UAAU,YAAaE,EAAQI,MACnC,wBAAIN,UAAU,gBAAiBE,EAAQJ,UACvC,wBAAIE,UAAU,kBAAmBG,GACjC,wBAAIH,UAAU,aACb,kBAAC,OAAD,CAAMO,OAAO,SAASC,GAAKN,EAAQN,KAAnC,QAED,wBAAII,UAAU,eAAgBE,EAAQO,eCM7BC,EAtCD,WAEb,IAAMC,EAAahB,EAAQC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,YAAWC,OAAQb,GAExD0B,EAAYjB,EAAQkB,OAEpBC,EAAUH,EAAaC,EAEvBG,EAAMxB,KAAKwB,IAAIC,MAAOzB,KAAMI,EAAQC,KAAK,SAAAC,GAAG,OAAIoB,WAAYpB,EAAIC,cAEhEoB,EAA2B,IAAO,IAAQN,EAAcD,EAExDQ,EAA4BD,EAAuB,EAAI,SAAW,QAExE,OACC,yBAAKlB,UAAU,SACd,4BACC,6BACC,gDACA,4BAAMX,EAAYyB,GAAlB,WAED,6BACC,gDACA,4BAAMC,EAAN,WAED,6BACC,iDACA,4BAAM1B,EAAYM,EAAQkB,OAAS,MAAnC,MAED,6BACC,oDACA,4BAAMxB,EAAYE,KAAK6B,IAAKF,IAA5B,UAA+DC,OCbrDE,UAfG,kBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,2CACX,oFACA,yJACA,sCACA,4BACE,8DACA,gFAEF,kBAAC,EAAD,MACA,kBAAC,EAAD","file":"component---src-pages-index-js-bea908645896d219850b.js","sourcesContent":["const Sum = ( accumulator, currentValue ) => accumulator + currentValue;\n\nconst RoundFloat = ( num ) => Math.round( num * 100 ) / 100;\n\nexport { Sum, RoundFloat };\n","import React from \"react\"\nimport runData from \"../data/run-data.json\";\nimport { Link } from \"gatsby\";\nimport { Sum } from '../utilities/aggregators';\n\nconst Table = () => {\n\n\tlet cumulativeDistance = runData.map( day => day.distance ).reduce( Sum ) * 100;\n\n\treturn (\n\t\t<table>\n\t\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th className=\"col-date\">Date</th>\n\t\t\t\t<th className=\"col-time\">Time of Day</th>\n\t\t\t\t<th className=\"col-distance\">Distance</th>\n\t\t\t\t<th className=\"col-cumulative\">Total Distance</th>\n\t\t\t\t<th className=\"col-route\">Route</th>\n\t\t\t\t<th className=\"col-remarks\">Remarks</th>\n\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t{\n\t\t\t\trunData.reverse().map( ( dayData ) => {\n\n\t\t\t\t\tconst cumulativeDistanceDisplayed = Math.round( cumulativeDistance ) / 100;\n\t\t\t\t\tcumulativeDistance -= dayData.distance * 100;\n\n\t\t\t\t\treturn <tr key={ dayData.date }>\n\t\t\t\t\t\t<td className=\"col-date\">{ dayData.date }</td>\n\t\t\t\t\t\t<td className=\"col-time\">{ dayData.time }</td>\n\t\t\t\t\t\t<td className=\"col-distance\">{ dayData.distance }</td>\n\t\t\t\t\t\t<td className=\"col-cumulative\">{ cumulativeDistanceDisplayed }</td>\n\t\t\t\t\t\t<td className=\"col-route\">\n\t\t\t\t\t\t\t<Link target=\"_blank\" to={ dayData.map }>Map</Link>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td className=\"col-remarks\">{ dayData.remark }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t} )\n\t\t\t}\n\t\t\t</tbody>\n\t\t</table>\n\t)\n}\n\nexport default Table\n","import React from \"react\"\nimport runData from \"../data/run-data.json\";\nimport { Sum, RoundFloat } from '../utilities/aggregators';\n\nconst Stats = () => {\n\n\tconst totalMiles = runData.map( day => day.distance ).reduce( Sum );\n\n\tconst totalDays = runData.length;\n\n\tconst average = totalMiles / totalDays;\n\n\tconst max = Math.max.apply( Math, runData.map( day => parseFloat( day.distance ) ) );\n\n\tconst ThousandDifferential = ( ( 1000 / 365 ) * totalDays ) - totalMiles;\n\n\tconst ThousandDifferentialLabel = ThousandDifferential > 0 ? 'behind' : 'ahead';\n\n\treturn (\n\t\t<div className=\"stats\">\n\t\t\t<dl>\n\t\t\t\t<div>\n\t\t\t\t\t<dt>Average Distance</dt>\n\t\t\t\t\t<dd>{ RoundFloat( average ) } miles</dd>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<dt>Maximum Distance</dt>\n\t\t\t\t\t<dd>{ max } miles</dd>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<dt>Yearly Completion</dt>\n\t\t\t\t\t<dd>{ RoundFloat( runData.length / 3.65 ) }%</dd>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<dt>1,000 Mile Goal Pace</dt>\n\t\t\t\t\t<dd>{ RoundFloat( Math.abs( ThousandDifferential ) ) } miles { ThousandDifferentialLabel }</dd>\n\t\t\t\t</div>\n\t\t\t</dl>\n\t\t</div>\n\t)\n}\n\nexport default Stats\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Table from \"../components/table\"\nimport Stats from \"../components/stats\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Phil Birnie runs for 365 Days in a Row\" />\n    <p>Hello! My name is Phil.  I live in Worthington, Ohio.</p>\n    <p>Starting on January 1, 2021, I will attempt to run for 365 days in a row -- just for fun. Keep track of my progress below.</p>\n    <h3>Rules:</h3>\n    <ul>\n      <li>Run at least 0.5 miles per day</li>\n      <li>Runs than span midnight may count as both days.</li>\n    </ul>\n    <Stats />\n    <Table />\n  </Layout>\n)\n\nexport default IndexPage\n"],"sourceRoot":""}