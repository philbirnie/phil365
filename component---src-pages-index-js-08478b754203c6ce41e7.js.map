{"version":3,"sources":["webpack:///./src/utilities/aggregators.js","webpack:///./src/components/table.js","webpack:///./src/components/stats.js","webpack:///./src/components/monthly-stats.js","webpack:///./src/pages/index.js"],"names":["Sum","accumulator","currentValue","RoundFloat","num","Math","round","Table","cumulativeDistance","runData","map","day","distance","reduce","className","reverse","dayData","cumulativeDistanceDisplayed","key","date","time","target","to","remark","Stats","totalMiles","totalDays","length","average","max","apply","parseFloat","ThousandDifferential","ThousandDifferentialLabel","GoalMetLabel","abs","splitMonthlyData","currentRun","month","parseInt","substr","push","MonthlyStats","data","index","monthlyTotal","monthlyAverage","displayedTotal","monthNumber","GetMonthName","IndexPage","title"],"mappings":"sg/BAAMA,EAAM,SAACC,EAAaC,GAAd,OAA+BD,EAAcC,GAEnDC,EAAa,SAACC,GAAD,OAASC,KAAKC,MAAY,IAANF,GAAa,KC2CrCG,EAxCD,WAEb,IAAIC,EAAwE,IAAnDC,EAAQC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,YAAWC,OAAQb,GAEpE,OACC,+BACC,+BACA,4BACC,wBAAIc,UAAU,YAAd,QACA,wBAAIA,UAAU,YAAd,eACA,wBAAIA,UAAU,gBAAd,YACA,wBAAIA,UAAU,kBAAd,kBACA,wBAAIA,UAAU,aAAd,SACA,wBAAIA,UAAU,eAAd,aAGD,+BAECL,EAAQM,UAAUL,KAAK,SAAEM,GAExB,IAAMC,EAA8BZ,KAAKC,MAAOE,GAAuB,IAGvE,OAFAA,GAAyC,IAAnBQ,EAAQJ,SAEvB,wBAAIM,IAAMF,EAAQG,MACxB,wBAAIL,UAAU,YAAaE,EAAQG,MACnC,wBAAIL,UAAU,YAAaE,EAAQI,MACnC,wBAAIN,UAAU,gBAAiBE,EAAQJ,UACvC,wBAAIE,UAAU,kBAAmBG,GACjC,wBAAIH,UAAU,aACb,kBAAC,OAAD,CAAMO,OAAO,SAASC,GAAKN,EAAQN,KAAnC,QAED,wBAAII,UAAU,eAAgBE,EAAQO,eCa7BC,EA7CD,WAEb,IAAMC,EAAahB,EAAQC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,YAAWC,OAAQb,GAExD0B,EAAYjB,EAAQkB,OAEpBC,EAAUH,EAAaC,EAEvBG,EAAMxB,KAAKwB,IAAIC,MAAOzB,KAAMI,EAAQC,KAAK,SAAAC,GAAG,OAAIoB,WAAYpB,EAAIC,cAEhEoB,EAA2B,IAAO,IAAQN,EAAcD,EAExDQ,EAA4BD,EAAuB,EAAI,SAAW,QAEpEE,EAAkB/B,GAAY,IAAOsB,IAAe,IAAMC,IAA9C,wBAMhB,OAJGD,EAAa,MACfS,EAAe,aAIf,yBAAKpB,UAAU,SACd,4BACC,6BACC,gDACA,4BAAMX,EAAYyB,GAAlB,WAED,6BACC,gDACA,4BAAMC,EAAN,WAED,6BACC,iDACA,4BAAM1B,EAAYM,EAAQkB,OAAS,MAAnC,OAAgDlB,EAAQkB,OAAxD,WAED,6BACC,oDACA,4BAAMxB,EAAYE,KAAK8B,IAAKH,IAA5B,UAA+DC,GAC/D,4BAAMC,OCtCLE,EAAmB3B,EAAQI,QHAX,SAACZ,EAAaoC,GAEhC,IAAMC,EAAQC,SAASF,EAAWlB,KAAKqB,OAAO,EAAG,GAAI,IAOrD,OALKvC,EAAYqC,KACbrC,EAAYqC,GAAS,IAGzBrC,EAAYqC,GAAOG,KAAKJ,GACjBpC,IGT4C,IA2BxCyC,EAzBM,WACjB,OACI,yBAAK5B,UAAU,SACX,4BAEQsB,EAAiB1B,KAAI,SAACiC,EAAMC,GAExB,IAAMC,EAAeF,EAAKjC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,YAAUC,OAAOb,GAEpD8C,EAAiBzC,KAAKC,MAAOuC,EAAeF,EAAKhB,OAAU,KAAO,IAElEoB,EAAiB1C,KAAKC,MAAqB,IAAfuC,GAAsB,IAExD,OAAO,yBAAK3B,IAAG,SAAW0B,GACtB,4BHJP,SAACI,GAClB,OAAQA,GACR,KAAK,EACD,MAAO,MACX,KAAK,EACD,MAAO,MACX,KAAK,EACD,MAAO,MACX,KAAK,EACD,MAAO,MACX,KAAK,EACD,MAAO,MACX,KAAK,EACD,MAAO,MACX,KAAK,EACD,MAAO,MACX,KAAK,EACD,MAAO,MACX,KAAK,EACD,MAAO,MACX,KAAK,GACD,MAAO,MACX,KAAK,GACD,MAAO,MACX,KAAK,GACD,MAAO,MACX,QACI,MAAO,IGvBkBC,CAAaL,IAClB,4BAAKG,GACL,gCAAMD,EAAN,YCEbI,UAhBG,kBACd,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,MAAM,2CACX,wHACA,sCACA,4BACI,8DACA,gFAEJ,kBAAC,EAAD,MACA,8CACA,kBAAC,EAAD,MACA,kBAAC,EAAD","file":"component---src-pages-index-js-08478b754203c6ce41e7.js","sourcesContent":["const Sum = (accumulator, currentValue) => accumulator + currentValue;\n\nconst RoundFloat = (num) => Math.round(num * 100) / 100;\n\nconst SpliceByMonth = (accumulator, currentRun) => {\n\n    const month = parseInt(currentRun.date.substr(5, 2), 10);\n\n    if (!accumulator[month]) {\n        accumulator[month] = [];\n    }\n\n    accumulator[month].push(currentRun);\n    return accumulator;\n};\n\nconst GetMonthName = (monthNumber) => {\n    switch (monthNumber) {\n    case 1:\n        return 'Jan';\n    case 2:\n        return 'Feb';\n    case 3:\n        return 'Mar';\n    case 4:\n        return 'Apr';\n    case 5:\n        return 'May';\n    case 6:\n        return 'Jun';\n    case 7:\n        return 'Jul';\n    case 8:\n        return 'Aug';\n    case 9:\n        return 'Sep';\n    case 10:\n        return 'Oct';\n    case 11:\n        return 'Nov';\n    case 12:\n        return 'Dec';\n    default:\n        return '';\n    }\n}\n\nexport {Sum, RoundFloat, SpliceByMonth, GetMonthName};\n","import React from \"react\"\nimport runData from \"../data/run-data.json\";\nimport { Link } from \"gatsby\";\nimport { Sum } from '../utilities/aggregators';\n\nconst Table = () => {\n\n\tlet cumulativeDistance = runData.map( day => day.distance ).reduce( Sum ) * 100;\n\n\treturn (\n\t\t<table>\n\t\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th className=\"col-date\">Date</th>\n\t\t\t\t<th className=\"col-time\">Time of Day</th>\n\t\t\t\t<th className=\"col-distance\">Distance</th>\n\t\t\t\t<th className=\"col-cumulative\">Total Distance</th>\n\t\t\t\t<th className=\"col-route\">Route</th>\n\t\t\t\t<th className=\"col-remarks\">Remarks</th>\n\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t{\n\t\t\t\trunData.reverse().map( ( dayData ) => {\n\n\t\t\t\t\tconst cumulativeDistanceDisplayed = Math.round( cumulativeDistance ) / 100;\n\t\t\t\t\tcumulativeDistance -= dayData.distance * 100;\n\n\t\t\t\t\treturn <tr key={ dayData.date }>\n\t\t\t\t\t\t<td className=\"col-date\">{ dayData.date }</td>\n\t\t\t\t\t\t<td className=\"col-time\">{ dayData.time }</td>\n\t\t\t\t\t\t<td className=\"col-distance\">{ dayData.distance }</td>\n\t\t\t\t\t\t<td className=\"col-cumulative\">{ cumulativeDistanceDisplayed }</td>\n\t\t\t\t\t\t<td className=\"col-route\">\n\t\t\t\t\t\t\t<Link target=\"_blank\" to={ dayData.map }>Map</Link>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td className=\"col-remarks\">{ dayData.remark }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t} )\n\t\t\t}\n\t\t\t</tbody>\n\t\t</table>\n\t)\n}\n\nexport default Table\n","import React from \"react\"\nimport runData from \"../data/run-data.json\";\nimport { Sum, RoundFloat } from '../utilities/aggregators';\n\nconst Stats = () => {\n\n\tconst totalMiles = runData.map( day => day.distance ).reduce( Sum );\n\n\tconst totalDays = runData.length;\n\n\tconst average = totalMiles / totalDays;\n\n\tconst max = Math.max.apply( Math, runData.map( day => parseFloat( day.distance ) ) );\n\n\tconst ThousandDifferential = ( ( 1000 / 365 ) * totalDays ) - totalMiles;\n\n\tconst ThousandDifferentialLabel = ThousandDifferential > 0 ? 'behind' : 'ahead';\n\n\tlet GoalMetLabel = `${RoundFloat((1000 - totalMiles) / (365 - totalDays))} mi. per day required`;\n\n\tif(totalMiles > 1000) {\n\t\tGoalMetLabel = 'Goal Met!';\n\t}\n\n\treturn (\n\t\t<div className=\"stats\">\n\t\t\t<dl>\n\t\t\t\t<div>\n\t\t\t\t\t<dt>Average Distance</dt>\n\t\t\t\t\t<dd>{ RoundFloat( average ) } miles</dd>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<dt>Maximum Distance</dt>\n\t\t\t\t\t<dd>{ max } miles</dd>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<dt>Yearly Completion</dt>\n\t\t\t\t\t<dd>{ RoundFloat( runData.length / 3.65 ) }% ( {runData.length} days)</dd>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<dt>1,000 Mile Goal Pace</dt>\n\t\t\t\t\t<dd>{ RoundFloat( Math.abs( ThousandDifferential ) ) } miles { ThousandDifferentialLabel }</dd>\n\t\t\t\t\t<dd>{ GoalMetLabel }</dd>\n\t\t\t\t</div>\n\t\t\t</dl>\n\t\t</div>\n\t)\n}\n\nexport default Stats\n","import React from \"react\"\nimport runData from \"../data/run-data.json\";\nimport {SpliceByMonth, GetMonthName, Sum} from '../utilities/aggregators';\n\nconst splitMonthlyData = runData.reduce(SpliceByMonth, []);\n\nconst MonthlyStats = () => {\n    return (\n        <div className=\"stats\">\n            <dl>\n                {\n                    splitMonthlyData.map((data, index) => {\n\n                        const monthlyTotal = data.map(day => day.distance).reduce(Sum);\n\n                        const monthlyAverage = Math.round((monthlyTotal / data.length) * 100) / 100;\n\n                        const displayedTotal = Math.round(monthlyTotal * 100) / 100;\n\n                        return <div key={`month-${index}`}>\n                            <dt>{GetMonthName(index)}</dt>\n                            <dd>{displayedTotal}</dd>\n                            <dd>({monthlyAverage})</dd>\n                        </div>\n                    })\n                }\n            </dl>\n        </div>\n    )\n}\n\nexport default MonthlyStats\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Table from \"../components/table\"\nimport Stats from \"../components/stats\"\nimport MonthlyStats from \"../components/monthly-stats\"\n\nconst IndexPage = () => (\n    <Layout>\n        <SEO title=\"Phil Birnie runs for 365 Days in a Row\" />\n        <p>Starting on January 1, 2021, I will attempt to run for 365 days in a row and 1,000 miles.</p>\n        <h3>Rules:</h3>\n        <ul>\n            <li>Run at least 0.5 miles per day</li>\n            <li>Runs than span midnight may count as both days.</li>\n        </ul>\n        <Stats />\n        <h3>Monthly Totals</h3>\n        <MonthlyStats />\n        <Table />\n    </Layout>\n)\n\nexport default IndexPage\n"],"sourceRoot":""}